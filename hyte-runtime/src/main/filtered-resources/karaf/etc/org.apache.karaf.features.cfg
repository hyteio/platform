featuresRepositories = \
    mvn:org.apache.karaf.features/enterprise/${hyte.karaf.version}/xml/features, \
    mvn:org.apache.karaf.features/specs/${hyte.karaf.version}/xml/features, \
    mvn:org.apache.karaf.features/standard/${hyte.karaf.version}/xml/features, \
    mvn:org.apache.karaf.features/framework/${hyte.karaf.version}/xml/features, \
    mvn:org.apache.karaf.features/spring-legacy/${hyte.karaf.version}/xml/features, \
    mvn:org.apache.cxf.karaf/apache-cxf/${hyte.cxf.version}/xml/features, \
    mvn:org.apache.camel.karaf/apache-camel/${hyte.camel.version}/xml/features, \
    mvn:org.apache.activemq/activemq-karaf/${hyte.activemq.version}/xml/features, \
    mvn:io.hyte.platform/features/${project.version}/xml/features

#
# Comma separated list of features to install at startup
#
featuresBoot = \
    instance/${hyte.karaf.version}, \
    package/${hyte.karaf.version}, \
    log/${hyte.karaf.version}, \
    ssh/${hyte.karaf.version}, \
    framework/${hyte.karaf.version}, \
    system/${hyte.karaf.version}, \
    eventadmin/${hyte.karaf.version}, \
    feature/${hyte.karaf.version}, \
    shell/${hyte.karaf.version}, \
    management/${hyte.karaf.version}, \
    service/${hyte.karaf.version}, \
    jaas/${hyte.karaf.version}, \
    deployer/${hyte.karaf.version}, \
    diagnostic/${hyte.karaf.version}, \
    wrap/2.6.17, \
    bundle/${hyte.karaf.version}, \
    config/${hyte.karaf.version}, \
    kar/${hyte.karaf.version}

#
# Resource repositories (OBR) that the features resolver can use
# to resolve requirements/capabilities
#
# The format of the resourceRepositories is 
# resourceRepositories=[xml:url|json:url],...
# for Instance:
#
#resourceRepositories=xml:http://host/path/to/index.xml
# or
#resourceRepositories=json:http://host/path/to/index.json
#

#
# Defines if the boot features are started in asynchronous mode (in a dedicated thread)
#
featuresBootAsynchronous=false

#
# Service requirements enforcement
#
# By default, the feature resolver checks the service requirements/capabilities of
# bundles for new features (xml schema >= 1.3.0) in order to automatically installs
# the required bundles.
# The following flag can have those values:
#   - disable: service requirements are completely ignored
#   - default: service requirements are ignored for old features
#   - enforce: service requirements are always verified
#
#serviceRequirements=default

#
# Store cfg file for config element in feature
#
#configCfgStore=true

#
# Define if the feature service automatically refresh bundles
#
#autoRefresh=true

#
# Configuration of features processing mechanism (overrides, blacklisting, modification of features)
# XML file defines instructions related to features processing
# versions.properties may declare properties to resolve placeholders in XML file
# both files are relative to ${karaf.etc}
#
#featureProcessing=org.apache.karaf.features.xml
#featureProcessingVersions=versions.properties
